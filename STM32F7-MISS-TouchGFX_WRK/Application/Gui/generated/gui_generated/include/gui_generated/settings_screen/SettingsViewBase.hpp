/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SETTINGS_VIEW_BASE_HPP
#define SETTINGS_VIEW_BASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/settings_screen/SettingsPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

#include <touchgfx/containers/Slider.hpp>
class SettingsViewBase : public touchgfx::View<SettingsPresenter>
{
public:
    SettingsViewBase();
    virtual ~SettingsViewBase() {}

    virtual void setupScreen();

    /*
     * Custom Action Handlers
     */
    virtual void incBrightness()
    {
        // Override and implement this function in SettingsView
    }

    virtual void decBrightness()
    {
        // Override and implement this function in SettingsView
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box box1;
    touchgfx::ToggleButton toggleButton1;
    touchgfx::IconButtonStyle< touchgfx::TouchButtonTrigger > homeBtn;
    touchgfx::TextArea textArea1;
    touchgfx::Container container1;
    touchgfx::TextArea textArea2;
    touchgfx::TextButtonStyle< touchgfx::RepeatButtonTrigger > incBtn;
    touchgfx::TextAreaWithOneWildcard brightnessValue;
    touchgfx::TextButtonStyle< touchgfx::RepeatButtonTrigger > decBtn;

    touchgfx::IconButtonStyle< touchgfx::TouchButtonTrigger > workBtn;
    touchgfx::Slider slider2;
    touchgfx::TextAreaWithOneWildcard mcuLoad;
    touchgfx::TextArea textArea3;
    touchgfx::IconButtonStyle< touchgfx::TouchButtonTrigger > diagBtn;
    touchgfx::IconButtonStyle< touchgfx::TouchButtonTrigger > levelBtn;

    /*
     * Wildcard Buffers
     */
    static const uint16_t BRIGHTNESSVALUE_SIZE = 4;
    touchgfx::Unicode::UnicodeChar brightnessValueBuffer[BRIGHTNESSVALUE_SIZE];
    static const uint16_t MCULOAD_SIZE = 10;
    touchgfx::Unicode::UnicodeChar mcuLoadBuffer[MCULOAD_SIZE];

private:

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

    /*
     * Callback Declarations
     */
    touchgfx::Callback<SettingsViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<SettingsViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

};

#endif // SETTINGS_VIEW_BASE_HPP
