/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAIN_VIEW_BASE_HPP
#define MAIN_VIEW_BASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/main_screen/MainPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/Color.hpp>

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}

    virtual void setupScreen();

    /*
     * Custom Action Handlers
     */
    virtual void startRegulation()
    {
        // Override and implement this function in MainView
    }

    virtual void stopRegulation()
    {
        // Override and implement this function in MainView
    }

    virtual void incPressureBtn()
    {
        // Override and implement this function in MainView
    }

    virtual void decPressureBtn()
    {
        // Override and implement this function in MainView
    }

    virtual void incFlowBtn()
    {
        // Override and implement this function in MainView
    }

    virtual void decFlowBtn()
    {
        // Override and implement this function in MainView
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box box1;
    touchgfx::IconButtonStyle< touchgfx::TouchButtonTrigger > homeBtn;
    touchgfx::TextButtonStyle< touchgfx::IconButtonStyle< touchgfx::TouchButtonTrigger > > settingsBtn;
    touchgfx::TextArea textArea1;
    touchgfx::TextArea textArea1_1;
    touchgfx::TextArea textArea1_1_1;
    touchgfx::TextArea textArea1_1_1_1;
    touchgfx::TextAreaWithOneWildcard actualPressure;
    touchgfx::TextAreaWithOneWildcard actualFlowLPM;
    touchgfx::TextAreaWithOneWildcard actualFlowRPM;
    touchgfx::Button stopBtn;
    touchgfx::Button startBtn;
    touchgfx::TextArea textArea1_1_2;
    touchgfx::TextArea textArea1_1_1_2;
    touchgfx::TextArea textArea1_1_1_1_1;
    touchgfx::TextAreaWithOneWildcard presetlPressure;
    touchgfx::TextAreaWithOneWildcard presetFlowLPM;
    touchgfx::TextAreaWithOneWildcard presetFlowRPM;
    touchgfx::IconButtonStyle< touchgfx::TouchButtonTrigger > decPressure;
    touchgfx::IconButtonStyle< touchgfx::TouchButtonTrigger > incPressure;
    touchgfx::IconButtonStyle< touchgfx::TouchButtonTrigger > decFlow;
    touchgfx::IconButtonStyle< touchgfx::TouchButtonTrigger > incFlow;
    touchgfx::TextAreaWithOneWildcard mcuLoad;
    touchgfx::TextArea textArea3;
    touchgfx::IconButtonStyle< touchgfx::TouchButtonTrigger > diagBtn;
    touchgfx::TextButtonStyle< touchgfx::IconButtonStyle< touchgfx::TouchButtonTrigger > > levelBtn;
    touchgfx::TextArea textArea1_1_2_1;
    touchgfx::TextArea textArea1_1_2_1_1;
    touchgfx::TextAreaWithOneWildcard actualTemp;
    touchgfx::TextAreaWithTwoWildcards errorStats;
    touchgfx::ModalWindow alarmWindow;
    touchgfx::Box box2;
    touchgfx::TextArea textArea4;
    touchgfx::Button stopBtnAlarm;

    touchgfx::TextArea textArea1_1_2_1_1_1;
    touchgfx::TextAreaWithTwoWildcards motorDiagnostics;

    /*
     * Wildcard Buffers
     */
    static const uint16_t ACTUALPRESSURE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar actualPressureBuffer[ACTUALPRESSURE_SIZE];
    static const uint16_t ACTUALFLOWLPM_SIZE = 10;
    touchgfx::Unicode::UnicodeChar actualFlowLPMBuffer[ACTUALFLOWLPM_SIZE];
    static const uint16_t ACTUALFLOWRPM_SIZE = 10;
    touchgfx::Unicode::UnicodeChar actualFlowRPMBuffer[ACTUALFLOWRPM_SIZE];
    static const uint16_t PRESETLPRESSURE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar presetlPressureBuffer[PRESETLPRESSURE_SIZE];
    static const uint16_t PRESETFLOWLPM_SIZE = 10;
    touchgfx::Unicode::UnicodeChar presetFlowLPMBuffer[PRESETFLOWLPM_SIZE];
    static const uint16_t PRESETFLOWRPM_SIZE = 10;
    touchgfx::Unicode::UnicodeChar presetFlowRPMBuffer[PRESETFLOWRPM_SIZE];
    static const uint16_t MCULOAD_SIZE = 10;
    touchgfx::Unicode::UnicodeChar mcuLoadBuffer[MCULOAD_SIZE];
    static const uint16_t ACTUALTEMP_SIZE = 10;
    touchgfx::Unicode::UnicodeChar actualTempBuffer[ACTUALTEMP_SIZE];
    static const uint16_t ERRORSTATSBUFFER1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar errorStatsBuffer1[ERRORSTATSBUFFER1_SIZE];
    static const uint16_t ERRORSTATSBUFFER2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar errorStatsBuffer2[ERRORSTATSBUFFER2_SIZE];
    static const uint16_t MOTORDIAGNOSTICSBUFFER1_SIZE = 6;
    touchgfx::Unicode::UnicodeChar motorDiagnosticsBuffer1[MOTORDIAGNOSTICSBUFFER1_SIZE];
    static const uint16_t MOTORDIAGNOSTICSBUFFER2_SIZE = 6;
    touchgfx::Unicode::UnicodeChar motorDiagnosticsBuffer2[MOTORDIAGNOSTICSBUFFER2_SIZE];

private:

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MainViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<MainViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

};

#endif // MAIN_VIEW_BASE_HPP
